<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-140</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>choice = -1;
sel = 0;
fields = 0;
mouse_px = mouse_x;
mouse_py = mouse_y;
dialog = -1;
master = noone;
callback = -1;
input = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var form;
for (var i = 0; i &lt; fields; i++) {
    form[i] = field[i,F.VALUE];
}
if (choice==0 &amp;&amp; script_exists(callback)) {
    with(master) script_execute(other.callback, form);
}
input = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dialog&gt;-1) exit;

if ((keyboard_check_pressed(vk_down)||gamepad_button_check_pressed(0,gp_padd)) &amp;&amp; sel&lt;fields-1) {
    sel++;
    choice = -1;
} else if ((keyboard_check_pressed(vk_up)||gamepad_button_check_pressed(0,gp_padu)) &amp;&amp; sel&gt;0) {
    sel--;
    choice = -1;
}

if (point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),64,188,128,212)||keyboard_check_pressed(vk_left)||gamepad_button_check_pressed(0,gp_padl)) {
    choice = 0;
    sel = -1;
} else if (point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),272,188,336,212)||keyboard_check_pressed(vk_right)||gamepad_button_check_pressed(0,gp_padr)) {
    choice = 1;
    sel = -1;
} else if (mouse_x!=mouse_px || mouse_y!=mouse_py) {
    choice = -1;
}

if (mouse_x!=mouse_px || mouse_y!=mouse_py) {
    if (window_get_cursor() == cr_handpoint)
        window_set_cursor(cr_default);
    sel = -1;
}

for (var i = 0; i &lt; fields; i++) {
    var X = 48+field[i,F.XPOS], Y = 20+field[i,F.YPOS];
    if (
        (field[i,F.TYPE]=="int" &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),X,Y+16,X+140,Y+36)) ||
        ((field[i,F.TYPE]=="string"||field[i,F.TYPE]=="login") &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),X,Y+16,X+288,Y+36)) ||
        ((field[i,F.TYPE]=="check"||field[i,F.TYPE]=="radio") &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),X,Y,X+16,Y+16)) ||
        (field[i,F.TYPE]=="link" &amp;&amp; point_in_rectangle(device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),X,Y,X+string_width(field[i,F.LABEL]),Y+16))
    ) {
        sel = i;
        if (field[i,F.TYPE]=="link") {
            window_set_cursor(cr_handpoint);
        } else {
            window_set_cursor(cr_default);
        }
    }
}

if ((mouse_check_button_pressed(mb_left)||keyboard_check_pressed(vk_enter)||gamepad_button_check_pressed(0,gp_start))) {
    if (choice&gt;-1) {
        var valid = true;
        for (var i = 0; i &lt; fields; i++) {
            var val = field[i,F.VALUE];
            if (
                (field[i,F.TYPE]=="string"&amp;&amp;(string_length(val)&lt;field[i,F.ILIM]||string_length(val)&gt;field[i,F.SLIM])) ||
                (field[i,F.TYPE]=="int"&amp;&amp;median(val, field[i,F.ILIM], field[i,F.SLIM])!=val) ||
                (field[i,F.TYPE]=="login"&amp;&amp;(val[0]==""||val[1]==""))
            ) valid = false;
        }
        if (valid || choice==1) {
            instance_destroy();
        }
    } else if (sel&gt;-1) {
        switch(field[sel,F.TYPE]) {
            case "int": dialog = get_integer_async(field[sel,F.LABEL],field[sel,F.VALUE]); break;
            case "string": dialog = get_string_async(field[sel,F.LABEL],field[sel,F.VALUE]); break;
            case "login": var c = field[sel,F.VALUE]; dialog = get_login_async(c[0],c[1]); break;
            case "check": field[sel,F.VALUE] = !field[sel,F.VALUE]; break;
            case "radio": {
                for (var i = 0; i &lt; fields; i++) {
                    if (field[i,F.TYPE]=="radio") field[i,F.VALUE] = false;
                }
                field[sel,F.VALUE] = true;
                break;
            }
            case "link": url_open(field[sel,F.VALUE]); break;
        }
    }
}
mouse_px = mouse_x;
mouse_py = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_map_find_value(async_load, "id") == dialog) {
    if (ds_map_find_value(async_load, "status")) {
        if (field[sel,F.TYPE]=="int") {
            field[sel,F.VALUE] = median(field[sel,F.ILIM], floor(ds_map_find_value(async_load, "value")), field[sel,F.SLIM]);
        } else if (field[sel,F.TYPE]=="string") {
            var s = ds_map_find_value(async_load, "result");
            if (string_length(s) &gt; field[sel,F.SLIM]) {
                field[sel,F.VALUE] = string_copy(s, 1, field[sel,F.SLIM]);
            } else {
                field[sel,F.VALUE] = s;
            }
        } else {
            field[sel,F.VALUE] = array(
                string_copy(ds_map_find_value(async_load, "username"), 1, 20),
                string_copy(ds_map_find_value(async_load, "password"), 1, 64)
            );
        }
    }
    dialog = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_alpha(0.9);
draw_rectangle(48,20,352,220,0);
draw_set_alpha(1);
draw_set_color(c_black);
draw_rectangle(48,20,352,220,1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
for (var i = 0; i &lt; fields; i++) {
    var X = 48+field[i,F.XPOS], Y = 20+field[i,F.YPOS];
    switch(field[i,F.TYPE]) {
        case "int": {
            draw_set_color(c_white);
            draw_rectangle(X,Y+16,X+140,Y+36,0);
            draw_set_color(cond(sel==i, c_red, c_black));
            draw_rectangle(X,Y+16,X+140,Y+36,1);
            draw_set_font(fntDefault);
            draw_text(X,Y,field[i,F.LABEL]);
            draw_set_font(fntSmall);
            draw_text(X+8,Y+18,string(field[i,F.VALUE]));
            break;
        }
        case "string": {
            draw_set_color(c_white);
            draw_rectangle(X,Y+16,X+288,Y+36,0);
            draw_set_color(cond(sel==i, c_red, c_black));
            draw_rectangle(X,Y+16,X+288,Y+36,1);
            draw_set_font(fntDefault);
            draw_text(X,Y,field[i,F.LABEL]);
            draw_set_font(fntSmall);
            draw_text(X+8,Y+18,string_truncate(string_validate(field[i,F.VALUE]), 272));
            break;
        }
        case "empty": {
            draw_set_color(c_black);
            draw_set_font(fntDefault);
            draw_text(X,Y,field[i,F.LABEL]);
            break;
        }
        case "check": {
            draw_set_color(c_white);
            draw_rectangle(X,Y,X+16,Y+16,0);
            draw_set_color(cond(sel==i, c_red, c_black));
            draw_rectangle(X,Y,X+16,Y+16,1);
            if (field[i,F.VALUE]) {
                draw_line_width(X,Y,X+16,Y+16,1);
                draw_line_width(X+16,Y,X,Y+16,1);
            }
            draw_set_font(fntSmall);
            draw_text(X+20,Y+1,field[i,F.LABEL]);
            break;
        }
        case "radio": {
            draw_set_color(c_white);
            draw_set_circle_precision(64);
            draw_circle(X+8,Y+8,8,0);
            draw_set_color(cond(sel==i, c_red, c_black));
            draw_circle(X+8,Y+8,8,1);
            if (field[i,F.VALUE]) draw_circle(X+8,Y+8,4,0);
            draw_set_font(fntSmall);
            draw_text(X+20,Y+1,field[i,F.LABEL]);
            break;
        }
        case "link": {
            draw_set_color(cond(sel==i, c_red, c_blue));
            draw_set_font(fntSmall);
            draw_text(X,Y,field[i,F.LABEL]);
            draw_line(X,Y+12,X+string_width(field[i,F.LABEL]),Y+12);
            break;
        }
        case "login": {
            draw_set_color(c_white);
            draw_rectangle(X,Y+16,X+140,Y+36,0);
            draw_rectangle(X+148,Y+16,X+288,Y+36,0);
            draw_set_color(cond(sel==i, c_red, c_black));
            draw_rectangle(X,Y+16,X+140,Y+36,1);
            draw_rectangle(X+148,Y+16,X+288,Y+36,1);
            draw_set_font(fntDefault);
            draw_text(X,Y,field[i,F.LABEL]);
            draw_set_font(fntSmall);
            var c = field[i,F.VALUE];
            draw_text(X+8,Y+18,string_truncate(string_validate(c[0]),124));
            draw_text(X+156,Y+18,string_truncate(string_repeat("*", string_length(c[1])),124));
            break;
        }
    }
}
draw_set_color(c_white);
draw_rectangle(64,188,144,212,0);
draw_rectangle(256,188,336,212,0);
draw_set_color(c_red);
draw_rectangle(64+192*choice,188,144+192*choice,212,0);
draw_set_color(c_black);
draw_rectangle(64,188,144,212,1);
draw_rectangle(256,188,336,212,1);
draw_set_font(fntDefault);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(104,200,"Submit");
draw_text(296,200,"Cancel");
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
